require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe EthogramsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Ethogram. As you add validations to Ethogram, be sure to
  # adjust the attributes here as well.
  describe 'without signing in' do
    describe 'GET #index' do
      it 'redirects to the sign in page' do
        get :index
        expect(response).to have_http_status(302)
      end
    end
    describe 'GET #show' do
      it 'redirects to the sign in page' do
        get :show, params: { id: 1 }
        expect(response).to have_http_status(302)
      end
    end
    describe 'GET #new' do
      it 'redirects to the sign in page' do
        get :new
        expect(response).to have_http_status(302)
      end
    end
    describe 'GET #edit' do
      it 'redirects to the sign in page' do
        get :edit, params: { id: 1 }
        expect(response).to have_http_status(302)
      end
    end
    describe 'POST #create' do
      it 'redirects to the sign in page' do
        post :create
        expect(response).to have_http_status(302)
      end
    end
  end
  describe 'with a valid user' do
    login_user

    let(:valid_attributes) do
      { name: 'SCBI' }
    end

    let(:invalid_attributes) do
      { name: '' }
    end

    describe 'GET #index' do
      it 'assigns all ethograms as @ethograms' do
        ethogram = Ethogram.create! valid_attributes
        get :index, params: {}
        expect(assigns(:ethograms)).to eq([ethogram])
      end
    end

    describe 'GET #show' do
      it 'assigns the requested ethogram as @ethogram' do
        ethogram = Ethogram.create! valid_attributes
        get :show, params: { id: ethogram.to_param }
        expect(assigns(:ethogram)).to eq(ethogram)
      end
    end

    describe 'GET #new' do
      it 'assigns a new ethogram as @ethogram' do
        get :new, params: {}
        expect(assigns(:ethogram)).to be_a_new(Ethogram)
      end
    end

    describe 'GET #edit' do
      it 'assigns the requested ethogram as @ethogram' do
        ethogram = Ethogram.create! valid_attributes
        get :edit, params: { id: ethogram.to_param }
        expect(assigns(:ethogram)).to eq(ethogram)
      end
    end

    describe 'POST #create' do
      context 'with valid params' do
        it 'creates a new Ethogram' do
          expect do
            post :create, params: { ethogram: valid_attributes }
          end.to change(Ethogram, :count).by(1)
        end

        it 'assigns a newly created ethogram as @ethogram' do
          post :create, params: { ethogram: valid_attributes }
          expect(assigns(:ethogram)).to be_a(Ethogram)
          expect(assigns(:ethogram)).to be_persisted
        end

        it 'redirects to the created ethogram' do
          post :create, params: { ethogram: valid_attributes }
          expect(response).to redirect_to(Ethogram.last)
        end
      end

      context 'with invalid params' do
        it 'assigns a newly created but unsaved ethogram as @ethogram' do
          post :create, params: { ethogram: invalid_attributes }
          expect(assigns(:ethogram)).to be_a_new(Ethogram)
        end

        it "re-renders the 'new' template" do
          post :create, params: { ethogram: invalid_attributes }
          expect(response).to render_template('new')
        end
      end
    end

    describe 'PUT #update' do
      context 'with valid params' do
        let(:new_attributes) do
          { name: 'outer space' }
        end

        it 'updates the requested ethogram' do
          ethogram = Ethogram.create! valid_attributes
          put :update, params: { id: ethogram.to_param, ethogram: new_attributes }
          ethogram.reload
          expect(ethogram.name).to eq 'outer space'
        end

        it 'assigns the requested ethogram as @ethogram' do
          ethogram = Ethogram.create! valid_attributes
          put :update, params: { id: ethogram.to_param, ethogram: valid_attributes }
          expect(assigns(:ethogram)).to eq(ethogram)
        end

        it 'redirects to the ethogram' do
          ethogram = Ethogram.create! valid_attributes
          put :update, params: { id: ethogram.to_param, ethogram: valid_attributes }
          expect(response).to redirect_to(ethogram)
        end
      end

      context 'with invalid params' do
        it 'assigns the ethogram as @ethogram' do
          ethogram = Ethogram.create! valid_attributes
          put :update, params: { id: ethogram.to_param, ethogram: invalid_attributes }
          expect(assigns(:ethogram)).to eq(ethogram)
        end

        it "re-renders the 'edit' template" do
          ethogram = Ethogram.create! valid_attributes
          put :update, params: { id: ethogram.to_param, ethogram: invalid_attributes }
          expect(response).to render_template('edit')
        end
      end
    end

    describe 'DELETE #destroy' do
      it 'destroys the requested ethogram' do
        ethogram = Ethogram.create! valid_attributes
        expect do
          delete :destroy, params: { id: ethogram.to_param }
        end.to change(Ethogram, :count).by(-1)
      end

      it 'redirects to the ethograms list' do
        ethogram = Ethogram.create! valid_attributes
        delete :destroy, params: { id: ethogram.to_param }
        expect(response).to redirect_to(ethograms_url)
      end
    end
  end
end
